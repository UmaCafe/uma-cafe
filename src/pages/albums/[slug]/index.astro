---
import { readItems } from "@directus/sdk";
import Layout from "@layouts/Layout.astro";
import { file } from "@lib/cdn";
import { directus, forceArr, forceObj } from "@lib/cms";
import type { GetStaticPaths } from "astro";

export async function getAlbums() {
    return directus.request(
        readItems("albums", {
            fields: [
                "*",
                {
                    songs: [
                        "*",
                        {
                            songs_id: ["*"],
                            singers: [
                                "*",
                                {
                                    characters_id: [
                                        "slug",
                                        "visible",
                                        "name_en",
                                        "name_jp",
                                        "main_color",
                                        "secondary_color",
                                        { icon: ["filename_disk"] },
                                    ],
                                },
                            ],
                        },
                    ],
                    album_cover: ["filename_disk"],
                },
            ],
            filter: import.meta.env.DEV
                ? {}
                : {
                      visible: {
                          _eq: true,
                      },
                  },
        }),
    );
}

export const getStaticPaths: GetStaticPaths = async () => {
    const albums = await getAlbums();
    return albums.map((album) => ({
        params: { slug: album.slug ?? "null" },
        props: { album },
    }));
};

export type Props = {
    album: Awaited<ReturnType<typeof getAlbums>>[0];
};
const { album } = Astro.props;

const songs = forceArr(album.songs ?? []).map((song) => ({
    ...song,
    singers: forceArr(song.singers ?? []).map((singer) => ({
        ...singer,
        characters_id: forceObj(singer.characters_id),
    })),
    songs_id: forceObj(song.songs_id),
}));

const numDiscs = Math.max(...songs.flatMap((v) => v.disc_num));
const hasDrama = !!songs.find((v) => v.songs_id.song_type == "drama");
---

<Layout
    title={album.name_en}
    description={songs.length + " Songs"}
    image={file(album.album_cover)}
>
    <div class="container">
        <div class="title">
            <h1>{album.name_en}</h1>
            {album.name_en != album.name_jp && <h2>「{album.name_jp}」</h2>}
        </div>
        <div class="cover">
            <img
                width="300"
                src={file(album.album_cover)}
                alt={album.name_en}
            />
            <div class="links">
                <div class="info-links">
                    {album.vgmdb && <a href={album.vgmdb}>VGMdb</a>}
                </div>
                <div class="buy-links">
                    {
                        album.cdjapan && (
                            <a href={album.cdjapan}>Buy on CDJapan</a>
                        )
                    }
                    {album.amazon && <a href={album.amazon}>Buy on Amazon</a>}
                </div>
            </div>
        </div>
        <div class="extra">
            {
                album.release_date && (
                    <div>
                        Release Date:{" "}
                        {new Date(album.release_date).toLocaleString(
                            undefined,
                            {
                                month: "short",
                                year: "numeric",
                                day: "numeric",
                            },
                        )}
                    </div>
                )
            }
            {
                hasDrama && (
                    <div>
                        <label>
                            <input id="show-drama" type="checkbox" />
                            Show Drama Tracks
                        </label>
                    </div>
                )
            }
        </div>
        {
            [...Array(numDiscs)].map((_, disc) => (
                <>
                    {numDiscs > 1 && <h3>Disc {disc + 1}</h3>}
                    <ol class="songs">
                        {songs
                            .filter((v) => v.disc_num == disc + 1)
                            .map((song) => (
                                <li
                                    value={song.track_num}
                                    data-type={song.songs_id.song_type}
                                >
                                    <p class="song-name">
                                        <span class="name-en">
                                            {song.songs_id.name_en}
                                        </span>
                                        {song.songs_id.name_jp !==
                                            song.songs_id.name_en && (
                                            <span class="name-jp">
                                                「{song.songs_id.name_jp}」
                                            </span>
                                        )}
                                    </p>
                                    <div class="singers">
                                        {song.singers.map((singer) => (
                                            <a
                                                href={
                                                    singer.characters_id.visible
                                                        ? `/characters/${singer.characters_id.slug}`
                                                        : undefined
                                                }
                                            >
                                                <img
                                                    style={`--main: ${singer.characters_id.main_color}; --secondary: ${singer.characters_id.secondary_color}`}
                                                    src={file(
                                                        singer.characters_id
                                                            .icon,
                                                    )}
                                                    alt={
                                                        singer.characters_id
                                                            .name_en
                                                    }
                                                    title={`${singer.characters_id.name_en}`}
                                                    width="50"
                                                    height="50"
                                                />
                                            </a>
                                        ))}
                                    </div>
                                </li>
                            ))}
                    </ol>
                </>
            ))
        }
    </div>
</Layout>

<script>
    function setDramaVisible(visible: boolean) {
        for (let trackEl of document.querySelectorAll("*[data-type]")) {
            const track = trackEl as HTMLElement;
            if (track.dataset.type == "drama") {
                if (visible) {
                    track.classList.remove("hidden");
                } else {
                    track.classList.add("hidden");
                }
            }
        }
    }

    for (let el of document.querySelectorAll("#show-drama")) {
        el.addEventListener("change", (ev) => {
            const checkbox = ev.currentTarget as HTMLInputElement;
            setDramaVisible(checkbox.checked);
        });
    }
    setDramaVisible(false);
</script>

<style>
    .container {
        padding: 10px 30px;
    }

    h1,
    h2 {
        margin: 0;
    }
    h2 {
        font-weight: normal;
    }
    h3 {
        margin-left: 0;
        text-decoration: underline;
    }

    .title {
        margin: 20px 0;
    }

    .cover {
        float: right;
        padding: 10px;
    }
    .cover img {
        border-radius: 15px;
    }

    .extra {
        display: flex;
        gap: 20px;
    }

    .links {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    li > p {
        margin-bottom: 5px;
    }

    .songs > li::marker,
    .song-name > .name-en {
        font-weight: bold;
    }

    .hidden {
        display: none;
    }

    .singers {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
    }
    .singers img {
        background:
            linear-gradient(transparent, transparent) padding-box,
            linear-gradient(to top left, var(--main) 25%, var(--secondary))
                border-box;
        border: 2px solid transparent;
        border-radius: 50px;
    }
</style>
