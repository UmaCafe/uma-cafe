---
import GalleryImage from "@components/GalleryImage.astro";
import InfoPanel from "@components/InfoPanel.astro";
import { readItems } from "@directus/sdk";
import Layout from "@layouts/Layout.astro";
import { directus, forceObj } from "@lib/cms";
import { IMAGE_TAG_LIST, IMAGE_TAG_NAMES } from "@lib/tags";
import type { GetStaticPaths } from "astro";
import { Icon } from "astro-icon";

export async function getChars() {
    return directus.request(
        readItems("characters", {
            fields: ["*"],
            filter: {},
            limit: 999,
        }),
    );
}

export async function getImages(charId: string) {
    return directus.request(
        readItems("gallery_image", {
            fields: [
                "*",
                {
                    image: ["*"],
                    character_tags: [
                        "*",
                        { characters_id: ["id", "name_en", "icon"] },
                    ],
                },
            ],
            filter: {
                character_tags: {
                    characters_id: {
                        _contains: charId,
                    },
                },
            },
            sort: "image",
            limit: 999,
        }),
    );
}

export const getStaticPaths: GetStaticPaths = async () => {
    const characters = await getChars();
    return (
        await Promise.all(
            characters.map(async (character) => {
                const images = await getImages(character.id);
                return {
                    params: { slug: character.slug },
                    props: { character, images },
                };
            }),
        )
    ).filter((res) => res.props.images.length > 0);
};

export type Props = {
    character: Awaited<ReturnType<typeof getChars>>[0];
    images: Awaited<ReturnType<typeof getImages>>;
};
const { character, images } = Astro.props;

const availableTags = IMAGE_TAG_LIST.filter((v) =>
    images.find((i) => i.image_tags?.includes(v)),
);
---

<Layout
    title={`Gallery - ${character.name_en}`}
    description={`Official Umamusume image gallery for ${character.name_en}`}
>
    <InfoPanel
        mainColor={character.main_color}
        subColor={character.secondary_color}
        topBackgroundColor="#f5f5ff"
        bottomBackgroundColor="#e9e9f9"
    >
        <div class="title-container" slot="title">
            {
                character.visible && (
                    <div class="backlink">
                        <Icon
                            name="mdi:person-box"
                            height="24"
                            color={character.secondary_color}
                        />
                        <a href={`/characters/${character.slug}`}>
                            Character Page
                        </a>
                    </div>
                )
            }
            <div class="title-box">
                <h1>
                    <ruby>{character.name_en}<rt>{character.name_jp}</rt></ruby>
                </h1>
                <h3>Image Gallery</h3>
            </div>
        </div>
        <div class="filters">
            <label>
                Filter to:
                <select id="filter">
                    <option value="">None</option>
                    {
                        availableTags.map((tag) => (
                            <option value={tag}>{IMAGE_TAG_NAMES[tag]}</option>
                        ))
                    }
                </select>
            </label>
        </div>
        <div id="image-grid">
            {
                images.map((image) => (
                    <div class="item" data-tags={image.image_tags?.join(",")}>
                        <GalleryImage
                            id={image.id}
                            title={image.caption}
                            source={image.image_source}
                            image={forceObj(image.image)}
                        />
                    </div>
                ))
            }
        </div>
    </InfoPanel>
</Layout>

<script is:inline src="/scripts/masonry.pkgd.min.js"></script>

<script>
    const grid = document.querySelector("#image-grid");
    const masonry = new window.Masonry(grid, {
        itemSelector: "div.item:not(.hidden)",
        columnWidth: "div.item:not(.hidden)",
        gutter: 10,
    });

    document.querySelector("#filter")?.addEventListener("change", (ev) => {
        const val = (ev.currentTarget as HTMLSelectElement).value;
        for (const el of document.querySelectorAll("div.item")) {
            const div = el as HTMLDivElement;
            let show = true;
            if (val) {
                show = div.dataset?.tags?.split(",").includes(val) ?? false;
            }
            if (show) {
                div.classList.remove("hidden");
            } else {
                div.classList.add("hidden");
            }
        }
        masonry.layout();
    });
</script>

<style>
    .title-container {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .title-box {
        padding: 10px 15px;
        border-radius: 20px;
        text-align: center;
    }
    .title-box > h3 {
        font-style: italic;
    }

    @media (max-width: 600px) {
        .title-box {
            margin-top: 16px;
        }
    }

    .backlink {
        position: absolute;
        left: 5px;
        top: 5px;
        display: flex;
    }

    .filters {
        display: flex;
        justify-content: flex-end;
        width: 100%;
        padding: 5px 15px;
    }

    #image-grid {
        display: flex;
        flex-wrap: wrap;
        width: 100%;
        gap: 10px;
        margin: 10px 10px;
    }

    .hidden {
        display: none;
    }

    h1,
    h3 {
        margin: 10px 0;
    }
</style>
