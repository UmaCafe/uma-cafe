---
import InfoPanel from "@components/InfoPanel.astro";
import TabBox from "@components/TabBox.astro";
import CharacterBioHorse from "@components/character/CharacterBioHorse.astro";
import CharacterBioMain from "@components/character/CharacterBioMain.astro";
import CharacterBioSeiyuu from "@components/character/CharacterBioSeiyuu.astro";
import { readItems } from "@directus/sdk";
import Layout from "@layouts/Layout.astro";
import { asset, file } from "@lib/cdn";
import { directus, forceArr } from "@lib/cms";
import type {
    Character,
    CharacterTranslation,
    Horse,
    Seiyuu,
} from "@lib/database";
import type { GetStaticPaths } from "astro";
import { Icon } from "astro-icon";

export async function getChars() {
    return directus.request(
        readItems("characters", {
            fields: [
                "*",
                {
                    translations: ["*"],
                    roommate: ["name_en", "visible", "slug"],
                    seiyuu: ["*", { pic: ["filename_disk"] }],
                    counterpart: ["*", { pic: ["filename_disk"] }],
                    voice: ["filename_disk"],
                },
            ],
            filter: {
                visible: {
                    _eq: true,
                },
            },
        }),
    );
}

export async function countImgs(charId: string) {
    return (
        await directus.request(
            readItems("gallery_image", {
                fields: [],
                filter: {
                    character_tags: {
                        characters_id: { _contains: charId },
                    },
                },
            }),
        )
    ).length;
}

export const getStaticPaths: GetStaticPaths = async () => {
    const characters = await getChars();
    return Promise.all(
        characters.map(async (character) => {
            const galleryCount = await countImgs(character.id);
            return {
                params: { slug: character.slug },
                props: { character, galleryCount },
            };
        }),
    );
};

export type Props = {
    character: Awaited<ReturnType<typeof getChars>>[0];
    galleryCount: number;
};
const { character, galleryCount } = Astro.props;

const tls = forceArr(character.translations ?? []);
const en: CharacterTranslation | undefined = tls.find(
    (v) => v.languages_id == "en-US",
);
const jp: CharacterTranslation | undefined = tls.find(
    (v) => v.languages_id == "ja-JP",
);

const imageTabs: { key: string; val: string; url: string }[] = [];
if (character.seifuku)
    imageTabs.push({
        key: "seifuku",
        val: "Uniform",
        url: await asset(character.seifuku),
    });
if (character.shoubufuku)
    imageTabs.push({
        key: "shoubufuku",
        val: "Racing Outfit (Game)",
        url: await asset(character.shoubufuku),
    });
if (character.proto)
    imageTabs.push({
        key: "proto",
        val: "Racing Outfit (Original)",
        url: await asset(character.proto),
    });
if (character.stage)
    imageTabs.push({
        key: "stage",
        val: "Starting Future",
        url: await asset(character.stage),
    });

const descTabs: { key: string; val: string }[] = [
    { val: "Character Bio", key: "bio" },
];
if (character.seiyuu) descTabs.push({ val: "Voice", key: "voice" });
if (character.counterpart)
    descTabs.push({ val: "Real-life Counterpart", key: "counterpart" });
---

<Layout
    title={character.name_en}
    description={en?.about ??
        `Information about ${character.name_en} from Umamusume`}
    image={await asset(character.icon)}
>
    <InfoPanel
        mainColor={character.main_color}
        subColor={character.secondary_color}
        topBackgroundColor="#f5f5ff"
        bottomBackgroundColor="#e9e9f9"
    >
        <div class="title-container" slot="title">
            <div class="title-box">
                <h1>
                    <ruby>{character.name_en}<rt>{character.name_jp}</rt></ruby>
                </h1>
                {en?.epithet && <h3>"{en.epithet}"</h3>}
            </div>
        </div>
        <div class="intro-box">
            {
                en?.introduction && (
                    <p class="intro">
                        <em>"{en.introduction}"</em>
                    </p>
                )
            }
        </div>
        <div class="image">
            <TabBox tabs={imageTabs} outlineColor={character.secondary_color}>
                {
                    imageTabs.map((tab) => (
                        <div class="image-container" data-key={tab.key}>
                            <img src={tab.url} alt={character.name_en} />
                        </div>
                    ))
                }
            </TabBox>
            {
                galleryCount > 0 && (
                    <div class="gallery-link">
                        <Icon
                            name="clarity:image-gallery-solid"
                            height="24"
                            color={character.main_color}
                        />
                        <a href={`/characters/${character.slug}/gallery`}>
                            Image Gallery ({galleryCount})
                        </a>
                    </div>
                )
            }
        </div>
        <div class="desc">
            <TabBox tabs={descTabs} outlineColor={character.secondary_color}>
                <div data-key="bio">
                    <CharacterBioMain
                        character={character as Character}
                        en={en}
                        jp={jp}
                    />
                </div>
                <div data-key="voice">
                    <CharacterBioSeiyuu
                        voiceUrl={file(character.voice)}
                        seiyuu={character.seiyuu as Seiyuu}
                    />
                </div>
                <div data-key="counterpart">
                    <CharacterBioHorse horse={character.counterpart as Horse} />
                </div>
            </TabBox>
        </div>
    </InfoPanel>
</Layout>

<style>
    .image {
        position: relative;
        padding: 20px;
        padding-bottom: 40px;
        flex-grow: 1;
        border-radius: 10px;
    }

    @media (min-width: 768px) {
        .image {
            flex-basis: 0;
        }
    }

    .image-container {
        position: relative;
        width: 100%;
        height: 0;
        padding-top: 176%; /* h/w: 1320/750 */
    }
    .image-container img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: auto;
    }

    .gallery-link {
        position: absolute;
        left: 0;
        right: 0;
        display: flex;
        margin-top: 5px;
        gap: 5px;
        justify-content: center;
        align-items: center;
    }

    .title-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .title-box {
        padding: 10px 15px;
        border-radius: 20px;
        text-align: center;
    }

    .desc {
        flex-basis: 0;
        flex-grow: 1;
        padding: 20px;
        margin-bottom: 0;
    }

    .intro-box {
        width: 100%;
        margin: 0px 15px;
    }

    .intro {
        max-width: 500px;
        margin: 0 auto;
        font-size: large;
        background-color: #f5f5ff;
        margin: 20px auto;
        padding: 10px 15px;
        border: 2px solid var(--color-sub);
        box-shadow: 0px 0px 0px 5px #f5f5ff;
        border-radius: 20px;
    }

    h1,
    h3 {
        margin: 10px 0;
    }

    .desc :global(p) {
        margin: 5px 0;
    }

    .desc :global(ul) {
        margin: 0;
    }
</style>
